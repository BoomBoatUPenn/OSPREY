% Define images to process
root = 'calibration_images/'; % REPLACE W/ IMAGE FOLDER LOCATION
imageFileNames = {append(root, 'G0014257.JPG'),...
    append(root, 'G0014300.JPG'),...
    append(root, 'G0014310.JPG'),...
    append(root, 'G0014311.JPG'),...
    append(root, 'G0014313.JPG'),...
    append(root, 'G0014314.JPG'),...
    append(root, 'G0014317.JPG'),...
    append(root, 'G0014319.JPG'),...
    append(root, 'G0014320.JPG'),...
    append(root, 'G0014324.JPG'),...
    append(root, 'G0014329.JPG'),...
    append(root, 'G0014330.JPG'),...
    append(root, 'G0014331.JPG'),...
    append(root, 'G0014333.JPG'),...
    append(root, 'G0014334.JPG'),...
    append(root, 'G0014335.JPG'),...
    append(root, 'G0014337.JPG'),...
    append(root, 'G0014343.JPG'),...
    append(root, 'G0014349.JPG'),...
    append(root, 'G0014350.JPG'),...
    append(root, 'G0014351.JPG'),...
    append(root, 'G0014354.JPG'),...
    append(root, 'G0014355.JPG'),...
    append(root, 'G0014356.JPG'),...
    append(root, 'G0014357.JPG'),...
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 35;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera using fisheye parameters
[cameraParams, imagesUsed, estimationErrors] = estimateFisheyeParameters(imagePoints, worldPoints, ...
    [mrows, ncols], ...
    'EstimateAlignment', true, ...
    'WorldUnits', 'millimeters');

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% Use the calibration data to remove effects of lens distortion.
[undistortedImage, camIntrinsics] = undistortFisheyeImage(originalImage, cameraParams.Intrinsics, 'Output', 'full');